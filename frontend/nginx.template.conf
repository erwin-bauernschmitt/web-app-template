#------------------------------------------------------------------------------
# Nginx Configuration for Front End Container
#
# This Nginx configuration file specifies how Nginx should serve the React 
# frontend, proxy Django backend requests, and enforce HTTPS with rate limiting
# and payload limiting for security and performance. It also configures HTTP 
# redirecting and enables automatic management of worker processes.
#
# Maintainer: erwin-bauernschmitt 
# Last reviewed: 02/06/2025
#------------------------------------------------------------------------------

pid /var/run/nginx/nginx.pid;  # Set Nginx PID file location (owned by appuser)
worker_processes auto;  # Auto-scale worker processes to CPU cores

# Default event handling configuration
events {}

http {
    # Include MIME types for proper content-type headers
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Define rate limit zones
    limit_req_zone $binary_remote_addr zone=general_zone:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login_zone:10m rate=5r/m;

    # Map logging behavior for access.log
    map $status $log_normal {
        ~^429  0;  # Don't log 429s (too many requests) in access.log
        default 1; # Log all other requests
    }

    # Specify log format for access.log (IP, time, request, status, UA)
    log_format normal_log '$remote_addr - [$time_local] "$request" $status "$http_user_agent"';

    # Log only valid requests (not 429s) in access.log
    access_log /var/log/nginx/access.log normal_log if=$log_normal;

    # Log "error" level Nginx errors in error.log
    error_log /var/log/nginx/error.log error;

    # ---------- Catch-all defaults (first!) ----------
    server {
        listen 80  default_server;
        return 444;                           # HTTP: close connection
    }

    server {
        listen 443 ssl default_server;

        # reuse the same cert/key you already ship
        ssl_certificate     /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        return 444;                           # HTTPS: close connection
    }
    # ---------- End catch-all defaults ---------------

    # ---------- Your actual vhosts -------------------

    # HTTPS server block
    server {
        listen 443 ssl;
        server_name $NGINX_SERVER_NAME;
        client_max_body_size 500K;  # Limit POST size

        # SSL certs from mkcert for local HTTPS testing
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        # Proxy Django Admin requests to Django backend
        location /admin/ {
            limit_req zone=general_zone burst=20 nodelay;
            limit_req_status 429;

            proxy_pass http://backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Strictly rate limit the Django Admin login endpoint
        location /admin/login/ {
            limit_req zone=login_zone burst=3 nodelay;
            limit_req_status 429;

            proxy_pass http://backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Proxy API requests to backend
        location /api/ {
            limit_req zone=general_zone burst=20 nodelay;
            limit_req_status 429;

            proxy_pass http://backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Serve Django static files under /django-static/
        location /django-static/ {
            alias /usr/share/nginx/html/django-static/;
            access_log off;
            try_files $uri =404;
        }

        # Serve the React frontend for all other requests
        location / {
            limit_req zone=general_zone burst=20 nodelay;
            limit_req_status 429;
            
            root /usr/share/nginx/html;
            try_files $uri /index.html;
        }
    }

    # HTTP server block
    server {
        listen 80;
        server_name $NGINX_SERVER_NAME;
        return 301 https://$host$request_uri;  # Permanent redirect to HTTPS
        client_max_body_size 500K;  # Limit POST size
    }

    # ----------------------------------------------
}
